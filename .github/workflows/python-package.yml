# This workflow is based on pytest-blender which allows pytest to be used from inside Blender's python while running Blender in headless mode 
# https://github.com/mondeja/pytest-blender   qqq

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform:
          - macos-latest
        blender-version:
          - '3.3.12'

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python v3.8
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Cache Blender ${{ matrix.blender-version }}
        uses: actions/cache@v3
        id: cache-blender
        with:
          path: |
            blender-*
            _blender-executable-path.txt
          key: ${{ runner.os }}-${{ matrix.blender-version }}

      - name: Download Blender ${{ matrix.blender-version }}
        if: steps.cache-blender.outputs.cache-hit != 'true'
        id: download-blender
        run: |
          python -m pip install --upgrade blender-downloader
          printf "%s" "$(blender-downloader \
          ${{ matrix.blender-version }} --extract --remove-compressed \
          --quiet --print-blender-executable)" > _blender-executable-path.txt
          blender_executable="$(< _blender-executable-path.txt tr -d '\n')"
          echo "blender-executable=${blender_executable}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        id: install-dependencies
        run: |
          python -m pip install pytest-blender

          pip install flake8

          python -m pip install .[test]
          blender_executable="$(< _blender-executable-path.txt)"
          python_blender_executable="$(pytest-blender --blender-executable $blender_executable)"
          $python_blender_executable -m ensurepip
          $python_blender_executable -m pip install pytest

      - name: Configure Blender Test Environment
        run: |
          blender_executable=$(< _blender-executable-path.txt)
          # For example, to add your package to Blender's Python path:
          ${blender_executable} --background --python-use-system-env --python-expr "import sys; sys.path.append('scripts/')"

      - name: flake8 Lint
        run: flake8 . --exclude blender*,addon/,simulations/,blend/,test.py --max-line-length 88

      - name: Test with pytest-blender using downloaded blender version
        if: steps.cache-blender.outputs.cache-hit != 'true'
        run: |
          pytest -svv --blender-executable "${{ steps.download-blender.outputs.blender-executable }}" tests/

      - name: Test with pytest-blender using cached blender version
        if: steps.cache-blender.outputs.cache-hit == 'true'
        run: |
          cached_blender_executable=$(< _blender-executable-path.txt)
          pytest -svv --blender-executable "${cached_blender_executable}" tests/
      
      
      